#:kivy 2.1.0
<GameScreen>:
    # 1
    FloatLayout: 
    # FloatLayout acts like a widget (for all sakes and purposes)
        size: root.width, root.height     # 2
        pos: 0, 0     # This isn't really necessary but you can just include it if you want to be EXTRA careful
        # 3
        Button:  
            # 4
            text: "Button 1"
            # pos: 100, 100             # 5
            pos_hint: {"x": 0.1, "y": 0.2}      # 6
            size_hint: None, None
            size: 300, 300
            background_color: 0, 1, 0, 1

        Button: 
            text: "Button 2"
            # pos: 100, 450
            pos_hint: {"x": 0.1, "y": 0.5}
            size_hint: None, None 
            size: 250, 250
            background_color: 1, 0, 0, 1



# 1
# The float layout gives us total freedom of where the elements can be
# For example, elements can be top of one another
# In other words, it's almost like "position: absolute" on CSS
# 
# JUST REMEMBER:
# Because of this flexibility, this means that we need to provide explicit positions (and often also use explicit sizes 
# for a lot of the elements as well).

# 2 
# With FloatLayout, we actually don't have to specify a size BECAUSE it will take on the size and the positioning of its
# elements.
# IF WE DO PROVIDE A SIZE AND POSITION, it will affect the layout a little bit.
# However, if we do want to use "pos_hint" (see # 6), we do want to set the size

# 3
# Inside of FloatLayout, we do want some child widgets, such as a Button

# 4
# REMEMBER: Buttons have a default position of (0, 0)
# and a default size_hint of (1, 1)

# 5
# If we just use "pos", then there's no benefit to using FloatLayout

# 6
# pos_hint is basically the same as size_hint where we pass in the value of the position as a percentage of the parent pos
# REMEMBER: pos_hint takes in a dictionary value ("{"x": , "y"}" or "{"right": , "top"}") (You can also use, "left" 
# and "bottom" for the keywords as well)