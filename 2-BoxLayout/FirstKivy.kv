BoxLayoutExample:
# The BoxLayoutExample is going to be the main interface, which means that it will take up the entire window

<BoxLayoutExample>:
    BoxLayout:
        # 1 
        orientation: "vertical" # 2
        Button:
            text: "A"
            size: "400dp", "200dp"  # 3
            size_hint: 0.8, 0.5 # 4
        Button: 
            text: "B"
            size_hint: None, None # 5
            size: 100, 150
        Button:
            text: "C"
            size_hint: None, None
            height: "100dp"
            width: "60dp" # 6
        Label:
            text: "D" # 7
            size_hint: 0.5, None
            height: "60dp" # 8
        Button:
            text: "E"
            size_hint: 0.5, None
            height: "60dp" 
            pos_hint: {"x": 0.5, "y": 0} # 9


        BoxLayout:
        # 10
            orientation: "horizontal" # 11 
            spacing: "10dp" # 12
            Button:
                text: "1"
            Button: 
                text: "2"
            Button:
                text: "3"

    


# 1
# You can define the layout inside of the .kv file.
# However, if you've already inherited "BoxLayout" from the class in the main python file, then we don't need to define
# the layout inside of the .kv file.

# 2
# The default orientation is staking the elements "horizontally"

# 3
# Within a widget, you can resize and set the position of the elements such as widgets. This is because widgets do not handle
# the position of the size of the elements. However, layouts set the position to origin of their repsective "block" and set 
# the size_hint to (1, 1). By default, layouts will ignore "size" and "pos" properties.   

# 4
# size_hint is the porpotion of the parent/"block" within the layout
# 80% of the width, 50% of the height 
# The default is (1, 1)
# REMEMBER: The default size is (100, 100) so even if you don't define a size, the element will take on the default size.

# 5
# By nullifyin the values on "size_hint", we can use "size" (In other words, this allows us to enter "manual mode").

# 6
# We can manually set the width and height 
# The default height/width is 100 

# 7
# BoxLayout accepts any type of element/widget (it doesn't all have to be the same type) 

# 8
# You can have a mix between size_hint and height/width

# 9
# With layouts, you can set a "pos_hint"
# There are 3 different types of position the x and y axis
# You can just specify the position percentage for only one axis (so you can just change the position of only the x or only the 
# y axis)
    # x, center_x, right            # right refers to the right part of the element (the default is the left part)
    # y, center_y, top              # top refers to the top part of the element (the default is the bottom part)

# 10
# You can imbed a layout within another layout

# 11
# This default orientation for BoxLayout

# 12
# You can add a space in between the elements within THIS boxlayout